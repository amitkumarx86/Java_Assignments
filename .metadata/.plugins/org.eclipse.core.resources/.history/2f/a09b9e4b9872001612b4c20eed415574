package Algorithms;

public class NumbersfromOnetoK {
    public static void main(String[] args) {
	NumbersfromOnetoK m = new NumbersfromOnetoK();
	m.findSubArrayWith_1_to_K_Numbers();
    }
    private void findSubArrayWith_1_to_K_Numbers(){
	int[] arr={1,2,10,6,3,1,2,7,6,4,2,8,6,1,7,3,1,2,3,4};
	int k=4,strtInd=0,endInd=0,digCount=0;
	int[] kArr=new int[k+1];

	/*
	 * First find the subarray in which 1 to k number exist, it may 
	 * not be the minimal then we will try to minimize it
	 * */
	for(int i=0;i<arr.length;i++){
	    if(arr[i] <=k && arr[i] >=1){
		if(kArr[arr[i]]==0) digCount++;
		kArr[arr[i]]++;
		if(digCount == k) {endInd=i;break;}
	    }
	}
	int i=0,tempEnd=endInd;
	while(i<tempEnd){
	    if(arr[i] <=k && arr[i] >=1){
		System.out.println("i="+i+" and tempEnd="+tempEnd+" arr[i]="+arr[i]);
		kArr[arr[i]]--; // first decrement count
		printArray(kArr);
		if(kArr[arr[i]]!= 0) i++; // if count is not 0 then increment i
		System.out.println(arr[i]);
		System.out.println(kArr[arr[i]]);
		if(kArr[arr[i]] == 0) {
		    kArr[arr[i]]++;
		    tempEnd++;
		    kArr[arr[tempEnd]]++;
		    
		} 
	    }// this condition tell number should be between 1 and k
	}
	//System.out.println(endInd);
	//printArray(kArr);
    }
    private void printArray(int[] arr){
	for(int a : arr) System.out.print(a+" ");
	System.out.println();
    }
}
