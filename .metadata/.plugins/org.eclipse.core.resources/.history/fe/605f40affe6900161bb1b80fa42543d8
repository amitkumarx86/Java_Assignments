package Algorithms;

public class InversionPairs {
    public static int countInversions(int[] ar,int l,int r){
	if(l < r)
	    return 0;
	    int mid=(l+r)/2;
	    int c=0;
	    c=countInversions(ar, l, mid);
	    c+=countInversions(ar, mid+1, r);
	    c += merge(ar,l,mid,r);
	    return c;
	
    }
    public static int merge(int[] arr, int left, int mid, int right){
	  int i, j, k;
	  int inv_count = 0;
	  int[] temp = new int[arr.length];
	  i = left; /* i is index for left subarray*/
	  j = mid;  /* i is index for right subarray*/
	  k = left; /* i is index for resultant merged subarray*/
	  while ((i <= mid - 1) && (j <= right))
	  {
	    if (arr[i] <= arr[j])
	    {
	      temp[k++] = arr[i++];
	    }
	    else
	    {
	      temp[k++] = arr[j++];
	 
	     /*this is tricky -- see above explanation/diagram for merge()*/
	      inv_count = inv_count + (mid - i);
	    }
	  }
	 
	  /* Copy the remaining elements of left subarray
	   (if there are any) to temp*/
	  while (i <= mid - 1)
	    temp[k++] = arr[i++];
	 
	  /* Copy the remaining elements of right subarray
	   (if there are any) to temp*/
	  while (j <= right)
	    temp[k++] = arr[j++];
	 
	  /*Copy back the merged elements to original array*/
	  for (i=left; i <= right; i++)
	    arr[i] = temp[i];
	 
	  return inv_count;
    }
    public static void main(String[] args) {
	int[] ar = {5,4,3,2,1};
	System.out.println(countInversions(ar,0,ar.length-1));
    }
}
