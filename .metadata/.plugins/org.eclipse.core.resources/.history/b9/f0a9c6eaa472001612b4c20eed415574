package Algorithms;

public class NumbersfromOnetoK {
    public static void main(String[] args) {
	NumbersfromOnetoK m = new NumbersfromOnetoK();
	m.findSubArrayWith_1_to_K_Numbers();
    }
    private void findSubArrayWith_1_to_K_Numbers(){
	int[] arr={1,2,10,6,3,1,2,7,6,4,2,8,6,1,2,3,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};
	int k=4,strtInd=0,endInd=0,digCount=0;
	int[] kArr=new int[k+1];

	/*
	 * First find the subarray in which 1 to k number exist, it may 
	 * not be the minimal then we will try to minimize it
	 * */
	for(int i=0;i<arr.length;i++){
	    if(arr[i] <=k && arr[i] >=1){
		if(kArr[arr[i]]==0) digCount++;
		kArr[arr[i]]++;
		if(digCount == k) {endInd=i;break;}
	    }
	}
	int i=0,tempEnd=endInd+1;
	int strtTrack=0;
	int endTract=endInd+1;
	boolean flag=true;
	int min_len = endInd-strtInd+1;
	while(i<tempEnd && (i< arr.length || tempEnd < arr.length)){
	    //System.out.println("i="+i+" and tempEnd="+tempEnd+" arr[i]="+arr[i]+" arr[tempEnd]=");
	    if(arr[i] <=k && arr[i] >=1){
		kArr[arr[i]]--; // first decrement count
		
		// if count is becoming 0 then just increment the tempEnd location in right
		if(kArr[arr[i]] == 0) {
		    kArr[arr[i]]++;
		    if(tempEnd-i+1 < min_len){
			min_len=tempEnd-i+1;
			strtInd=i;
			endInd=tempEnd;
		}
		    if(tempEnd < arr.length)	
			    strtTrack=i;
		    if(tempEnd < arr.length && arr[tempEnd] <=k && arr[tempEnd] >=1 ){ 
			endTract=tempEnd;
			kArr[arr[tempEnd++]]++;
			
		
		    }
		    else if(tempEnd >= arr.length) i++;
		    else tempEnd++;
		    
		    
		}
		else {i++;
		strtTrack=i;
		} // if count is not 0 then increment i
	    }// this condition tell number should be between 1 and k
	    else i++;
	}
	System.out.println(strtInd+" "+(endInd-1));
	/*
	if(((endTract)-strtTrack) < (endInd - strtInd)){
	    System.out.println(strtTrack+" "+(endTract));
	}
	else
	    System.out.println(strtInd+" "+(endInd));
	*/
	//printArray(kArr);
    }
    private void printArray(int[] arr){
	for(int a : arr) System.out.print(a+" ");
	System.out.println();
    }
}
