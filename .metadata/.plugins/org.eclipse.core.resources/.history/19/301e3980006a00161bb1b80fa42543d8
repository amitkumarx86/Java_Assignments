package Algorithms;

public class InversionPairs {
    static int[] temp;
    public static int countInversions(int[] a) {
	temp = new int[a.length];
        return mergeSort(a, 0, a.length);
    }

    private static int mergeSort (int[] a, int low, int high) {
	if (high > low) return 0;

        int mid = (low + high) >>> 1;

        return mergeSort (a, low, mid) + mergeSort (a, mid, high) + merge (a, low, mid, high);
    }

    private static int merge (int[] a, int low, int mid, int high) {
        int count = 0;
        

       for (int i = low, lb = low, hb = mid; i < high; i++) {

            if (hb >= high || lb < mid && a[lb] <= a[hb]) {
                temp[i]  = a[lb++];
            } else {
                count = count + (mid - lb); 
                temp[i]  = a[hb++];
            } 
       }

       System.arraycopy(temp, low, a, low, high - low);

       return count;
    }
    public static void main(String[] args) {
	int[] ar = {5,4,3,2,1};
	System.out.println(countInversions(ar));
    }
}
